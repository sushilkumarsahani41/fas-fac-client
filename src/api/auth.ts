/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * KARMA ID API
 * KARMA ID Server API Documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useCustomInstance } from './auth.axios'
import type { ErrorType } from './auth.axios'
export interface UpdateProfileDto {
  city?: string
  contactNumber?: number
  contactNumberCountryCode?: string
  country?: string
  dob?: string
  ethnicity?: string
  gender?: string
  name?: string
  nationality?: string
  pincode?: number
  profession?: string
  purposeCode?: string
  qualification?: string
  state?: string
}

export interface ProfileMetaDto {
  ethnicities: string[]
  genders: string[]
  professions: string[]
  qualifications: string[]
}

export type ProfileResponseDtoStatus =
  (typeof ProfileResponseDtoStatus)[keyof typeof ProfileResponseDtoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileResponseDtoStatus = {
  'not-verified': 'not-verified',
  verified: 'verified',
  inactive: 'inactive',
} as const

export type ProfileResponseDtoRole =
  (typeof ProfileResponseDtoRole)[keyof typeof ProfileResponseDtoRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileResponseDtoRole = {
  user: 'user',
  admin: 'admin',
  moderator: 'moderator',
} as const

export type ProfileResponseDtoRegistrationPlatform =
  (typeof ProfileResponseDtoRegistrationPlatform)[keyof typeof ProfileResponseDtoRegistrationPlatform]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileResponseDtoRegistrationPlatform = {
  'cause-i': 'cause-i',
  dobe: 'dobe',
} as const

export interface ProfileResponseDto {
  city: string
  contactNumber: number
  contactNumberCountryCode: string
  country: string
  createdAt: string
  deletedAt: string
  dob: string
  email: string
  ethnicity: string
  gender: string
  id: number
  name: string
  nationality: string
  pincode: number
  profession: string
  purposeCode: string
  qualification: string
  registrationPlatform: ProfileResponseDtoRegistrationPlatform
  role: ProfileResponseDtoRole
  state: string
  status: ProfileResponseDtoStatus
  updatedAt: string
}

export interface ResendCodeDto {
  verificationToken: string
}

export interface VerifyResponseDto {
  authenticationToken: string
}

export interface VerifyDto {
  otp: string
  verificationToken: string
}

export interface LoginDto {
  email?: string
  karmaId?: string
}

export interface LoginResponseDto {
  verificationToken: string
}

export interface RegisterDto {
  email: string
  purposeCode?: string
}

export const useAppControllerRegisterHook = () => {
  const appControllerRegister = useCustomInstance<LoginResponseDto>()

  return (registerDto: RegisterDto) => {
    return appControllerRegister({
      url: `/v1/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerDto,
    })
  }
}

export const useAppControllerRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerRegisterHook>>>,
    TError,
    { data: RegisterDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerRegisterHook>>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerRegister = useAppControllerRegisterHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerRegisterHook>>>,
    { data: RegisterDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerRegister(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerRegisterHook>>>
>
export type AppControllerRegisterMutationBody = RegisterDto
export type AppControllerRegisterMutationError = ErrorType<unknown>

export const useAppControllerRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerRegisterHook>>>,
    TError,
    { data: RegisterDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAppControllerLoginHook = () => {
  const appControllerLogin = useCustomInstance<LoginResponseDto>()

  return (loginDto: LoginDto) => {
    return appControllerLogin({
      url: `/v1/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginDto,
    })
  }
}

export const useAppControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerLoginHook>>>,
    TError,
    { data: LoginDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerLoginHook>>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerLogin = useAppControllerLoginHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerLoginHook>>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerLogin(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerLoginHook>>>
>
export type AppControllerLoginMutationBody = LoginDto
export type AppControllerLoginMutationError = ErrorType<unknown>

export const useAppControllerLogin = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerLoginHook>>>,
    TError,
    { data: LoginDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAppControllerVerifyHook = () => {
  const appControllerVerify = useCustomInstance<VerifyResponseDto>()

  return (verifyDto: VerifyDto) => {
    return appControllerVerify({
      url: `/v1/verify`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyDto,
    })
  }
}

export const useAppControllerVerifyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerVerifyHook>>>,
    TError,
    { data: VerifyDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerVerifyHook>>>,
  TError,
  { data: VerifyDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerVerify = useAppControllerVerifyHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerVerifyHook>>>,
    { data: VerifyDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerVerify(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerVerifyMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerVerifyHook>>>
>
export type AppControllerVerifyMutationBody = VerifyDto
export type AppControllerVerifyMutationError = ErrorType<unknown>

export const useAppControllerVerify = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerVerifyHook>>>,
    TError,
    { data: VerifyDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerVerifyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAppControllerResendCodeHook = () => {
  const appControllerResendCode = useCustomInstance<LoginResponseDto>()

  return (resendCodeDto: ResendCodeDto) => {
    return appControllerResendCode({
      url: `/v1/resend-code`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: resendCodeDto,
    })
  }
}

export const useAppControllerResendCodeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerResendCodeHook>>>,
    TError,
    { data: ResendCodeDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerResendCodeHook>>>,
  TError,
  { data: ResendCodeDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerResendCode = useAppControllerResendCodeHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerResendCodeHook>>>,
    { data: ResendCodeDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerResendCode(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerResendCodeMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerResendCodeHook>>>
>
export type AppControllerResendCodeMutationBody = ResendCodeDto
export type AppControllerResendCodeMutationError = ErrorType<unknown>

export const useAppControllerResendCode = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerResendCodeHook>>>,
    TError,
    { data: ResendCodeDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerResendCodeMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useProfileControllerDeleteUserProfileHook = () => {
  const profileControllerDeleteUserProfile = useCustomInstance<ProfileResponseDto>()

  return (signal?: AbortSignal) => {
    return profileControllerDeleteUserProfile({
      url: `/v1/profile`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      signal
    })
  }
}

export const useProfileControllerDeleteUserProfileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerDeleteUserProfileHook>>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useProfileControllerDeleteUserProfileHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const profileControllerDeleteUserProfile = useProfileControllerDeleteUserProfileHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerDeleteUserProfileHook>>>,
    void
  > = () => profileControllerDeleteUserProfile()

  return { mutationFn, ...mutationOptions }
}

export const useProfileControllerDeleteUserProfile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerDeleteUserProfileHook>>>,
    TError,
    void,
    TContext
  >
}) => {
  const mutationOptions = useProfileControllerDeleteUserProfileMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useProfileControllerGetUserProfileHook = () => {
  const profileControllerGetUserProfile = useCustomInstance<ProfileResponseDto>()

  return (signal?: AbortSignal) => {
    return profileControllerGetUserProfile({ url: `/v1/profile`, method: 'GET', signal })
  }
}

export const getProfileControllerGetUserProfileQueryKey = () => {
  return [`/v1/profile`] as const
}

export const useProfileControllerGetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProfileControllerGetUserProfileQueryKey()

  const profileControllerGetUserProfile = useProfileControllerGetUserProfileHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>
  > = ({ signal }) => profileControllerGetUserProfile(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProfileControllerGetUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>
>
export type ProfileControllerGetUserProfileQueryError = ErrorType<unknown>

export const useProfileControllerGetUserProfile = <
  TData = Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserProfileHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useProfileControllerGetUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useProfileControllerUpdateUserProfileHook = () => {
  const profileControllerUpdateUserProfile = useCustomInstance<ProfileResponseDto>()

  return (updateProfileDto: UpdateProfileDto) => {
    return profileControllerUpdateUserProfile({
      url: `/v1/profile`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateProfileDto,
    })
  }
}

export const useProfileControllerUpdateUserProfileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerUpdateUserProfileHook>>>,
    TError,
    { data: UpdateProfileDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useProfileControllerUpdateUserProfileHook>>>,
  TError,
  { data: UpdateProfileDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const profileControllerUpdateUserProfile = useProfileControllerUpdateUserProfileHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerUpdateUserProfileHook>>>,
    { data: UpdateProfileDto }
  > = (props) => {
    const { data } = props ?? {}

    return profileControllerUpdateUserProfile(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProfileControllerUpdateUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useProfileControllerUpdateUserProfileHook>>>
>
export type ProfileControllerUpdateUserProfileMutationBody = UpdateProfileDto
export type ProfileControllerUpdateUserProfileMutationError = ErrorType<unknown>

export const useProfileControllerUpdateUserProfile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerUpdateUserProfileHook>>>,
    TError,
    { data: UpdateProfileDto },
    TContext
  >
}) => {
  const mutationOptions = useProfileControllerUpdateUserProfileMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useProfileControllerGetUserMetaHook = () => {
  const profileControllerGetUserMeta = useCustomInstance<ProfileMetaDto>()

  return (signal?: AbortSignal) => {
    return profileControllerGetUserMeta({ url: `/v1/profile/meta/all`, method: 'GET', signal })
  }
}

export const getProfileControllerGetUserMetaQueryKey = () => {
  return [`/v1/profile/meta/all`] as const
}

export const useProfileControllerGetUserMetaQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProfileControllerGetUserMetaQueryKey()

  const profileControllerGetUserMeta = useProfileControllerGetUserMetaHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>
  > = ({ signal }) => profileControllerGetUserMeta(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProfileControllerGetUserMetaQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>
>
export type ProfileControllerGetUserMetaQueryError = ErrorType<unknown>

export const useProfileControllerGetUserMeta = <
  TData = Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useProfileControllerGetUserMetaHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useProfileControllerGetUserMetaQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
