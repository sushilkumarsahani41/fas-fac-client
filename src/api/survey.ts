/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Cause I API
 * Cause I API Documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useCustomInstance } from './survey.axios'
import type { ErrorType } from './survey.axios'
export interface CreateFeedbackDto {
  comment?: string
  rating: number
}

export interface FeedbackDto {
  comment: string
  createdAt: string
  rating: number
  surveyId: number
  userId: number
}

export interface CreateResponseDto {
  optionId: number
  questionId: number
  saqResponse: string
}

export interface ResponseDto {
  createdAt: string
  optionId: number
  questionId: number
  respondentId: number
  saqResponse: string
  scoreCalculated: boolean
  surveyId: number
  updatedAt: string
}

export type QuestionDtoType = (typeof QuestionDtoType)[keyof typeof QuestionDtoType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionDtoType = {
  quant: 'quant',
  mcq: 'mcq',
  saq: 'saq',
} as const

export type QuestionDtoStatus = (typeof QuestionDtoStatus)[keyof typeof QuestionDtoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionDtoStatus = {
  draft: 'draft',
  published: 'published',
} as const

export interface OptionDto {
  createdAt: string
  description: string
  id: number
  questionId: number
  updatedAt: string
  multiLanguage: any
}

export interface QuestionDto {
  createdAt: string
  id: number
  imageCaption: string
  imageUrl: string
  karmaAttribute: string
  options: OptionDto[]
  situation: string
  status: QuestionDtoStatus
  surveyId: number
  title: string
  type: QuestionDtoType
  updatedAt: string
  multiLanguage: any
}

export interface hindi {
  hindi: string
}

export type SurveyDtoStatus = (typeof SurveyDtoStatus)[keyof typeof SurveyDtoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyDtoStatus = {
  draft: 'draft',
  published: 'published',
} as const

export interface SurveyDto {
  createdAt: string
  description: string
  id: number
  status: SurveyDtoStatus
  title: string
  updatedAt: string
}

export interface UpdateScaleDto {
  currentQuestionId: number
}

export interface AdviceDto {
  content: string
  imgUrl: string
  section: string
}

export interface CharacteristicDto {
  description: string
  imgUrl: string
  trait: string
}

export interface ScaleDto {
  altruism: number
  authenticity: number
  completed: boolean
  createdAt: string
  currentQuestionId: number
  kindness: number
  mindfulness: number
  resultEmailSent: boolean
  righteousness: number
  updatedAt: string
  userId: number
}

export interface CauseLevelDto {
  advices: AdviceDto[]
  characteristics: CharacteristicDto[]
  description: string
  highestAttribute: string
  imgUrl: string
  lowestAttribute: string
  meanScore: number
  name: string
  scale: ScaleDto
  totalScore: number
}

export const useAppControllerGetKarmaScaleHook = () => {
  const appControllerGetKarmaScale = useCustomInstance<ScaleDto>()

  return (signal?: AbortSignal) => {
    return appControllerGetKarmaScale({ url: `/v1/scale`, method: 'GET', signal })
  }
}

export const getAppControllerGetKarmaScaleQueryKey = () => {
  return [`/v1/scale`] as const
}

export const useAppControllerGetKarmaScaleQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetKarmaScaleQueryKey()

  const appControllerGetKarmaScale = useAppControllerGetKarmaScaleHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>
  > = ({ signal }) => appControllerGetKarmaScale(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppControllerGetKarmaScaleQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>
>
export type AppControllerGetKarmaScaleQueryError = ErrorType<unknown>

export const useAppControllerGetKarmaScale = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetKarmaScaleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useAppControllerUpdateScaleCurrentQuestionIdHook = () => {
  const appControllerUpdateScaleCurrentQuestionId = useCustomInstance<UpdateScaleDto>()

  return (updateScaleDto: UpdateScaleDto) => {
    return appControllerUpdateScaleCurrentQuestionId({
      url: `/v1/scale`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateScaleDto,
    })
  }
}

export const useAppControllerUpdateScaleCurrentQuestionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    TError,
    { data: UpdateScaleDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
  TError,
  { data: UpdateScaleDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerUpdateScaleCurrentQuestionId =
    useAppControllerUpdateScaleCurrentQuestionIdHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    { data: UpdateScaleDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerUpdateScaleCurrentQuestionId(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerUpdateScaleCurrentQuestionIdMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>
>
export type AppControllerUpdateScaleCurrentQuestionIdMutationBody = UpdateScaleDto
export type AppControllerUpdateScaleCurrentQuestionIdMutationError = ErrorType<unknown>

export const useAppControllerUpdateScaleCurrentQuestionId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    TError,
    { data: UpdateScaleDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerUpdateScaleCurrentQuestionIdMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAppControllerGetCauseLevelHook = () => {
  const appControllerGetCauseLevel = useCustomInstance<CauseLevelDto>()

  return (signal?: AbortSignal) => {
    return appControllerGetCauseLevel({ url: `/v1/cause-level`, method: 'GET', signal })
  }
}

export const getAppControllerGetCauseLevelQueryKey = () => {
  return [`/v1/cause-level`] as const
}

export const useAppControllerGetCauseLevelQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetCauseLevelQueryKey()

  const appControllerGetCauseLevel = useAppControllerGetCauseLevelHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>
  > = ({ signal }) => appControllerGetCauseLevel(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppControllerGetCauseLevelQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>
>
export type AppControllerGetCauseLevelQueryError = ErrorType<unknown>

export const useAppControllerGetCauseLevel = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetCauseLevelQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useAppControllerSendResultEmailHook = () => {
  const appControllerSendResultEmail = useCustomInstance<ScaleDto>()

  return () => {
    return appControllerSendResultEmail({ url: `/v1/send-result-email`, method: 'POST' })
  }
}

export const useAppControllerSendResultEmailMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerSendResultEmail = useAppControllerSendResultEmailHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    void
  > = () => {
    return appControllerSendResultEmail()
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerSendResultEmailMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>
>

export type AppControllerSendResultEmailMutationError = ErrorType<unknown>

export const useAppControllerSendResultEmail = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    TError,
    void,
    TContext
  >
}) => {
  const mutationOptions = useAppControllerSendResultEmailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useSurveyControllerGetAllHook = () => {
  const surveyControllerGetAll = useCustomInstance<SurveyDto[]>()

  return (signal?: AbortSignal) => {
    return surveyControllerGetAll({ url: `/v1/surveys`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetAllQueryKey = () => {
  return [`/v1/surveys`] as const
}

export const useSurveyControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetAllQueryKey()

  const surveyControllerGetAll = useSurveyControllerGetAllHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>
  > = ({ signal }) => surveyControllerGetAll(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>
>
export type SurveyControllerGetAllQueryError = ErrorType<unknown>

export const useSurveyControllerGetAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetOneHook = () => {
  const surveyControllerGetOne = useCustomInstance<SurveyDto>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetOne({ url: `/v1/surveys/${id}`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetOneQueryKey = (id: number) => {
  return [`/v1/surveys/${id}`] as const
}

export const useSurveyControllerGetOneQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetOneQueryKey(id)

  const surveyControllerGetOne = useSurveyControllerGetOneHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>
  > = ({ signal }) => surveyControllerGetOne(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>
>
export type SurveyControllerGetOneQueryError = ErrorType<unknown>

export const useSurveyControllerGetOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetOneQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetQuestionsHook = () => {
  const surveyControllerGetQuestions = useCustomInstance<QuestionDto[]>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetQuestions({
      url: `/v1/surveys/${id}/questions`,
      method: 'GET',
      signal,
    })
  }
}

export const getSurveyControllerGetQuestionsQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/questions`] as const
}

export const useSurveyControllerGetQuestionsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetQuestionsQueryKey(id)

  const surveyControllerGetQuestions = useSurveyControllerGetQuestionsHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>
  > = ({ signal }) => surveyControllerGetQuestions(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetQuestionsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>
>
export type SurveyControllerGetQuestionsQueryError = ErrorType<unknown>

export const useSurveyControllerGetQuestions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetQuestionsQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetSurveyResponseHook = () => {
  const surveyControllerGetSurveyResponse = useCustomInstance<ResponseDto[]>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetSurveyResponse({
      url: `/v1/surveys/${id}/responses`,
      method: 'GET',
      signal,
    })
  }
}

export const getSurveyControllerGetSurveyResponseQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/responses`] as const
}

export const useSurveyControllerGetSurveyResponseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetSurveyResponseQueryKey(id)

  const surveyControllerGetSurveyResponse = useSurveyControllerGetSurveyResponseHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>
  > = ({ signal }) => surveyControllerGetSurveyResponse(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetSurveyResponseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>
>
export type SurveyControllerGetSurveyResponseQueryError = ErrorType<unknown>

export const useSurveyControllerGetSurveyResponse = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetSurveyResponseQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerCreateResponseHook = () => {
  const surveyControllerCreateResponse = useCustomInstance<ResponseDto>()

  return (id: number, createResponseDto: CreateResponseDto) => {
    return surveyControllerCreateResponse({
      url: `/v1/surveys/${id}/response`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createResponseDto,
    })
  }
}

export const useSurveyControllerCreateResponseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    TError,
    { id: number; data: CreateResponseDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
  TError,
  { id: number; data: CreateResponseDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerCreateResponse = useSurveyControllerCreateResponseHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    { id: number; data: CreateResponseDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return surveyControllerCreateResponse(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerCreateResponseMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>
>
export type SurveyControllerCreateResponseMutationBody = CreateResponseDto
export type SurveyControllerCreateResponseMutationError = ErrorType<unknown>

export const useSurveyControllerCreateResponse = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    TError,
    { id: number; data: CreateResponseDto },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerCreateResponseMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useSurveyControllerGetFeedbackHook = () => {
  const surveyControllerGetFeedback = useCustomInstance<FeedbackDto>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetFeedback({ url: `/v1/surveys/${id}/feedback`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetFeedbackQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/feedback`] as const
}

export const useSurveyControllerGetFeedbackQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetFeedbackQueryKey(id)

  const surveyControllerGetFeedback = useSurveyControllerGetFeedbackHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>
  > = ({ signal }) => surveyControllerGetFeedback(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetFeedbackQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>
>
export type SurveyControllerGetFeedbackQueryError = ErrorType<unknown>

export const useSurveyControllerGetFeedback = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetFeedbackQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerCreateFeedbackHook = () => {
  const surveyControllerCreateFeedback = useCustomInstance<FeedbackDto>()

  return (id: number, createFeedbackDto: CreateFeedbackDto) => {
    return surveyControllerCreateFeedback({
      url: `/v1/surveys/${id}/feedback`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFeedbackDto,
    })
  }
}

export const useSurveyControllerCreateFeedbackMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    TError,
    { id: number; data: CreateFeedbackDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
  TError,
  { id: number; data: CreateFeedbackDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerCreateFeedback = useSurveyControllerCreateFeedbackHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    { id: number; data: CreateFeedbackDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return surveyControllerCreateFeedback(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerCreateFeedbackMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>
>
export type SurveyControllerCreateFeedbackMutationBody = CreateFeedbackDto
export type SurveyControllerCreateFeedbackMutationError = ErrorType<unknown>

export const useSurveyControllerCreateFeedback = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    TError,
    { id: number; data: CreateFeedbackDto },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerCreateFeedbackMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useSurveyControllerMarkAsCompleteHook = () => {
  const surveyControllerMarkAsComplete = useCustomInstance<ScaleDto>()

  return (id: number) => {
    return surveyControllerMarkAsComplete({
      url: `/v1/surveys/${id}/mark-as-complete`,
      method: 'POST',
    })
  }
}

export const useSurveyControllerMarkAsCompleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerMarkAsComplete = useSurveyControllerMarkAsCompleteHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return surveyControllerMarkAsComplete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerMarkAsCompleteMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>
>

export type SurveyControllerMarkAsCompleteMutationError = ErrorType<unknown>

export const useSurveyControllerMarkAsComplete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerMarkAsCompleteMutationOptions(options)

  return useMutation(mutationOptions)
}
